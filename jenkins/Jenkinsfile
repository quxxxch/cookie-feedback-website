
pipeline {
    agent any
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub_id')
        OCTOPUS_API_KEY = credentials('octopus_api_key')
        OCTOPUS_SERVER_URL = 'https://quxch.octopus.app/'
    }
    stages {

        // stage('Build') {
        //     steps {
        //         sh '/usr/local/bin/docker build -f Dockerfile -t website:latest .'

        //     }
        // }
        stage('Build') {
            steps {
                sh 'export PATH=$PATH:/usr/local/bin && docker build -f Dockerfile -t website:latest .'
            }
        }

        stage('Test') {
            steps {
                sh '/usr/local/bin/docker run --rm website:latest npm test'
            }
        }
        
        stage('SonarQube analysis') {
          steps {
            sh 'export PATH=/opt/homebrew/Cellar/openjdk/21.0.3/bin:$PATH && java -version'
            script {
                scannerHome = tool 'sonar-scanner'
            }
            withSonarQubeEnv('sonar-server') {
              sh "export PATH=/opt/homebrew/Cellar/openjdk/21.0.3/bin:$PATH && ${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=develop"
            }
          }
        }
        

        stage('Deploy') {
            steps {
                script {
                    sh '/usr/local/bin/docker run -d --rm -p 3000:3000 --name my_website website:latest'
                    sh 'export PATH=$PATH:/usr/local/bin && docker login -u $DOCKER_HUB_CREDENTIALS_USR -p $DOCKER_HUB_CREDENTIALS_PSW'
                    sh 'export PATH=$PATH:/usr/local/bin && docker tag website:latest quxch/website:latest'
                    sh 'export PATH=$PATH:/usr/local/bin && docker push quxch/website:latest'
                }
            }
        }
        //  stage('Release') {
        //     steps {
        //         script {
                //     echo 'Pull the latest image from Docker Hub...'
                //     sh 'export PATH=$PATH:/usr/local/bin && docker pull quxch/website:latest'
                //     echo 'Stop the currently running container (if any)'
                //     sh '''if [ $(export PATH=$PATH:/usr/local/bin && docker ps -q -f name=my_website) ]; then
                //         export PATH=$PATH:/usr/local/bin && docker stop my_website
                //     fi
                //     '''
                //     echo 'Remove the stopped container'
                //     sh '''if [ $(export PATH=$PATH:/usr/local/bin && docker ps -aq -f status=exited -f name=my_website) ]; then
                //         export PATH=$PATH:/usr/local/bin && docker rm my_website
                //     fi
                //     '''
                //     echo 'Run a new container with the latest image'
                //     sh 'export PATH=$PATH:/usr/local/bin && docker run -d --rm -p 3000:3000 --name my_website quxch/website:latest'
                // }
        //     }
        // }

        stage('Release') {
            steps {
                echo 'Releasing to Octopus Deploy...'
                script {
                    sh '''
                    export OCTOPUS_CLI_SERVER="https://quxch.octopus.app/"
                    export OCTOPUS_CLI_API_KEY="API-JZFPOQTJYYYXLSP7IAR9NR0EGAJ7TWO"
                    /usr/local/bin/octopus release create \
                        --project "website" \
                        --releaseNumber "1.0.${BUILD_NUMBER}" \
                        --space default \
                        --package "website:latest" --channel Default --no-prompt
                    '''
                    
                }
            }
        }

    }
}
